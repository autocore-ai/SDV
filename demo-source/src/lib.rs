use async_std::sync::Arc;
use async_trait::async_trait;
use std::collections::HashMap;
use std::convert::TryInto;
use std::sync::atomic::{AtomicUsize, Ordering};
use zenoh_flow::zenoh_flow_derive::ZFData;
use zenoh_flow::{
    default_output_rule, zf_data, zf_empty_state, ZFComponent, ZFComponentOutputRule, ZFContext,
    ZFPortID, ZFSourceTrait,
};
use zenoh_flow::{ZFDataTrait, ZFDeserializable, ZFError, ZFResult};

#[derive(Debug, Clone, ZFData)]
pub struct ZFUsize(pub usize);

impl ZFDataTrait for ZFUsize {
    fn try_serialize(&self) -> ZFResult<Vec<u8>> {
        Ok(self.0.to_ne_bytes().to_vec())
    }
}

impl ZFDeserializable for ZFUsize {
    fn try_deserialize(bytes: &[u8]) -> ZFResult<Self>
    where
        Self: Sized,
    {
        let value =
            usize::from_ne_bytes(bytes.try_into().map_err(|_| ZFError::DeseralizationError)?);
        Ok(ZFUsize(value))
    }
}
static COUNTER: AtomicUsize = AtomicUsize::new(0);

#[derive(Debug)]
struct DemoSource;

impl ZFComponent for DemoSource {
    fn initial_state(
        &self,
        _configuration: &Option<HashMap<String, String>>,
    ) -> Box<dyn zenoh_flow::ZFStateTrait> {
        zf_empty_state!()
    }
}

impl ZFComponentOutputRule for DemoSource {
    fn output_rule(
        &self,
        _context: &mut ZFContext,
        state: &mut Box<dyn zenoh_flow::ZFStateTrait>,
        outputs: &HashMap<String, Arc<dyn zenoh_flow::ZFDataTrait>>,
    ) -> ZFResult<HashMap<ZFPortID, zenoh_flow::ZFComponentOutput>> {
        default_output_rule(state, outputs)
    }
}

#[async_trait]
impl ZFSourceTrait for DemoSource {
    async fn run(
        &self,
        _context: &mut ZFContext,
        _state: &mut Box<dyn zenoh_flow::ZFStateTrait>,
    ) -> ZFResult<HashMap<ZFPortID, Arc<dyn ZFDataTrait>>> {
        let mut results: HashMap<ZFPortID, Arc<dyn ZFDataTrait>> = HashMap::with_capacity(1);
        results.insert(
            String::from("demo"),
            zf_data!(ZFUsize(COUNTER.fetch_add(1, Ordering::AcqRel))),
        );
        async_std::task::sleep(std::time::Duration::from_millis(100)).await;
        Ok(results)
    }
}

// Also generated by macro
zenoh_flow::export_source!(register);

fn register() -> ZFResult<Box<dyn ZFSourceTrait + Send>> {
    Ok(Box::new(DemoSource) as Box<dyn ZFSourceTrait + Send>)
}
