apiVersion: v1
kind: Namespace
metadata:
  name: sdv
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: autoware
  namespace: sdv
  labels:
    app: autoware
spec:
  replicas: 1
  selector:
    matchLabels:
      app: autoware
  serviceName: "sdv"
  template:
    metadata:
      labels:
        app: autoware
    spec:
      nodeSelector:
        app: autoware
      volumes:
        - name: volume
          emptyDir: {}
      containers:
        - name: zenoh-bridge-dds
          image: autocore/zenoh-bridge-dds:sdv
          command: ["/bin/bash"]
          args: ["-c", "export ROS_DOMAIN_ID=${HOSTNAME##*-} && /root/zenoh-plugin-dds/target/release/dzd --scope /demo/dds -m peer"]
          env:
          - name: RMW_IMPLEMENTATION
            value: rmw_cyclonedds_cpp
          - name: RUST_LOG
            value: info
        - name: sdk
          image: autocore/autoware-architecture-proposal-sdk:sdv
          volumeMounts:
            - name: volume
              mountPath: /AutowareArchitectureProposal
          command: ["/bin/bash"]
          args: ["-c", "export ROS_DOMAIN_ID=${HOSTNAME##*-} && cd /AutowareArchitectureProposal && source install/setup.bash && ros2 launch sdv_demo_launch sdv_demo.launch.xml"]
          env:
          - name: RMW_IMPLEMENTATION
            value: rmw_cyclonedds_cpp
      initContainers:
        - name: exe
          image: autocore/autoware-architecture-proposal-exe:sdv
          command: ["/bin/sh"]
          args: ["-c", "mv /AutowareArchitectureProposal/install /volume/"]
          volumeMounts:
            - name: volume
              mountPath: /volume
        - name: env
          image: autocore/autoware-architecture-proposal-env:sdv
          command: ["/bin/sh"]
          args: ["-c", "mv /AutowareArchitectureProposal/env /volume/"]
          volumeMounts:
            - name: volume
              mountPath: /volume
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rsu
  namespace: sdv
  labels:
    app: rsu
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rsu
  serviceName: "sdv"
  template:
    metadata:
      labels:
        app: rsu
    spec:
      nodeSelector:
        app: host
      containers:
        - name: rsu
          image: autocore/rsu:sdv
          env:
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: RUST_LOG
            value: info
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: storage
  namespace: sdv
  labels:
    app: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: storage
  serviceName: "sdv"
  template:
    metadata:
      labels:
        app: storage
    spec:
      hostNetwork: true
      nodeSelector:
        app: host
      containers:
        - name: storage
          image: autocore/zenoh:sdv
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
          - name: RUST_LOG
            value: info
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: autotest
  namespace: sdv
  labels:
    app: autotest
spec:
  replicas: 1
  selector:
    matchLabels:
      app: autotest
  serviceName: "sdv"
  template:
    metadata:
      labels:
        app: autotest
    spec:
      nodeSelector:
        app: autoware
      containers:
        - name: autotest
          image: kaka1223/autotest:native
          imagePullPolicy: Always
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: monitor
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: monitor
subjects:
- kind: ServiceAccount
  name: default
  namespace: sdv
roleRef:
  kind: ClusterRole
  name: monitor
  apiGroup: rbac.authorization.k8s.io
