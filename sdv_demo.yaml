apiVersion: v1
kind: Namespace
metadata:
  name: sdv
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: autoware
  namespace: sdv
  labels:
    app: autoware
spec:
  replicas: 2
  selector:
    matchLabels:
      app: autoware
  serviceName: "sdv"
  template:
    metadata:
      labels:
        app: autoware
    spec:
      hostNetwork: true
      nodeSelector:
        app: autoware
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - autoware
              topologyKey: "kubernetes.io/hostname"
      volumes:
        - name: volume
          emptyDir: {}
      containers:
        - name: zenoh-plugin-dds
          image: autocore/zenoh-plugin-dds:sdv
          imagePullPolicy: Always
          command: ["/bin/sh"]
          args:
            [
              "-c",
              "exec zenoh-bridge-dds --scope /demo/dds -m peer -d 2${POD_NAME##*-}",
            ]
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
        - name: sdk
          image: autocore/autoware-architecture-proposal-sdk:sdv
          imagePullPolicy: Always
          volumeMounts:
            - name: volume
              mountPath: /AutowareArchitectureProposal
          command: ["/bin/bash"]
          args:
            [
              "-c",
              "export ROS_DOMAIN_ID=2${POD_NAME##*-} && cd /AutowareArchitectureProposal && source install/setup.bash && ros2 launch sdv_demo_launch sdv_demo.launch.xml",
            ]
          env:
            - name: RMW_IMPLEMENTATION
              value: rmw_cyclonedds_cpp
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
      initContainers:
        - name: exe
          image: autocore/autoware-architecture-proposal-exe:sdv
          imagePullPolicy: Always
          command: ["/bin/sh"]
          args: ["-c", "mv /AutowareArchitectureProposal/install /volume/"]
          volumeMounts:
            - name: volume
              mountPath: /volume
        - name: env
          image: ghcr.io/autocore-ai/autoware-architecture-proposal-env:sdv
          imagePullPolicy: Always
          command: ["/bin/sh"]
          args: ["-c", "mv /AutowareArchitectureProposal/env /volume/"]
          volumeMounts:
            - name: volume
              mountPath: /volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: storage
  namespace: sdv
  labels:
    app: storage
spec:
  selector:
    matchLabels:
      app: storage
  template:
    metadata:
      labels:
        app: storage
    spec:
      hostNetwork: true
      nodeSelector:
        app: host
      containers:
        - name: storage
          image: autocore/zenoh:sdv
          command: ["/bin/sh"]
          args: ["-c", "exec /zenohd --mem-storage=/rsu/**"]
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rsu
  namespace: sdv
  labels:
    app: rsu
spec:
  selector:
    matchLabels:
      app: rsu
  template:
    metadata:
      labels:
        app: rsu
    spec:
      hostNetwork: true
      nodeSelector:
        app: host
      volumes:
        - name: volume
          emptyDir: {}
      containers:
        - name: rsu
          image: autocore/rsu-exe:fix-config
          imagePullPolicy: Always
          volumeMounts:
            - name: volume
              mountPath: /config
          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: RUST_LOG
              value: info
      initContainers:
        - name: cfg
          image: autocore/rsu-cfg:fix-config
          imagePullPolicy: Always
          command: ["/bin/sh"]
          args: ["-c", "mv /config/* /volume/"]
          volumeMounts:
            - name: volume
              mountPath: /volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autotest
  namespace: sdv
  labels:
    app: autotest
spec:
  selector:
    matchLabels:
      app: autotest
  template:
    metadata:
      labels:
        app: autotest
    spec:
      hostNetwork: true
      nodeSelector:
        app: host
      containers:
        - name: autotest
          image: autocore/autotest:sdv
          imagePullPolicy: Always
          env:
            - name: RMW_IMPLEMENTATION
              value: rmw_cyclonedds_cpp
            - name: ROS_DOMAIN_ID
              value: "20"
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: monitor
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: monitor
subjects:
- kind: ServiceAccount
  name: default
  namespace: sdv
roleRef:
  kind: ClusterRole
  name: monitor
  apiGroup: rbac.authorization.k8s.io